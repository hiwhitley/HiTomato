package com.hiwhitley.potatoandtomato.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hiwhitley.potatoandtomato.bean.Suggest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUGGEST".
*/
public class SuggestDao extends AbstractDao<Suggest, Void> {

    public static final String TABLENAME = "SUGGEST";

    /**
     * Properties of entity Suggest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Msg = new Property(0, String.class, "msg", false, "MSG");
        public final static Property MailOrQQ = new Property(1, String.class, "mailOrQQ", false, "MAIL_OR_QQ");
    };


    public SuggestDao(DaoConfig config) {
        super(config);
    }
    
    public SuggestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUGGEST\" (" + //
                "\"MSG\" TEXT," + // 0: msg
                "\"MAIL_OR_QQ\" TEXT);"); // 1: mailOrQQ
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUGGEST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Suggest entity) {
        stmt.clearBindings();
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(1, msg);
        }
 
        String mailOrQQ = entity.getMailOrQQ();
        if (mailOrQQ != null) {
            stmt.bindString(2, mailOrQQ);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Suggest readEntity(Cursor cursor, int offset) {
        Suggest entity = new Suggest( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // msg
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // mailOrQQ
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Suggest entity, int offset) {
        entity.setMsg(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMailOrQQ(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Suggest entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Suggest entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
